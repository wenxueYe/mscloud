<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>top.yewenxue.springcloud</groupId>
    <artifactId>mscloud</artifactId>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>cloud-provider-payment8001</module>
        <module>cloud-consumer-order8080</module>
        <module>cloud-api-commons</module>
        <module>cloud-eureka-server7001</module>
    </modules>
    <!--pom 项目里没有java代码，也不执行任何代码，只是为了聚合工程或传递依赖用的。-->
    <packaging>pom</packaging>


    <!-- 统一管理jar包版本 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <junit.version>4.12</junit.version>
        <log4j.version>1.2.17</log4j.version>
        <lombok.version>1.16.18</lombok.version>
        <mysql.version>5.1.47</mysql.version>
        <druid.version>1.1.16</druid.version>
        <mybatis.spring.boot.version>1.3.0</mybatis.spring.boot.version>
    </properties>


    <!-- 子模块继承之后，提供作用：锁定版本+子Module不用写groupId和version  -->

    <dependencyManagement>
        <dependencies>
            <!--spring boot 2.2.2-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.2.2.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud Hoxton.SR1-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Hoxton.SR1</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud alibaba 2.1.0.RELEASE-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>2.1.0.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.boot.version}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <optional>true</optional>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <fork>true</fork>
                    <addResources>true</addResources>
                </configuration>
            </plugin>
        </plugins>
    </build>


    <!--
    ps:
        note:
            dependencies和dependencyManagement的区别？
                Maven使用dependencyManagement元素提供了一种管理版本依赖版本号的方式。
                通常会在一个组织或者项目的顶层POM中看到dependencyManagement元素。
                使用pom.xml中的dependencyManagement元素能够在所有的子项目中引用一个依赖而不用显式的指定版本号。
                Maven会沿着父子层次向上走，直到找到一个拥有dependencyManagement元素的项目，然后就会使用这个dependencyManagement元素指定的版本号。
                然后在子项目中就可以不用指定版本号。
                这样做的好处就是：
                    如果有多个子项目都引用同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样想升级或者是切换到另外一个版本号，只需要在顶层父容器里更新，而不需要一个一个子项目的去修改；
                    另外如果一个子项目需要另外一个版本，只需要声明version即可。(cus:覆盖)
                *** dependencyManagement只是声明依赖，并不实现引入，因此子项目需要显式的声明需要用的依赖。
                *** 如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定版本号，才会从父项目中继承该项，并且version和scope都读取自父pom.
                *** 如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。

            Maven中如何跳过单元测试？
                右边栏Maven Projects中点击Toggle ‘Skip Tests’ Mode；按下之后，Lifecycle中的test阶段被跳过。

            父工程创建完成之后执行一下mvn:install将父工程发布到仓库方便子工程继承。

        ps:如何构造一个微服务模块。
            1.建Module
            2.改POM
            3.写YML
            4.主启动
            5.业务类
-->

</project>
